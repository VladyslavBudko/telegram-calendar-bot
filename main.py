
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)
from datetime import datetime

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

events = [
    {"user": "Alice", "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π", "date": "2025-04-24", "color": "üîµ", "comments": []},
    {"user": "Bob", "title": "–î–µ–º–æ-–ø–æ–∫–∞–∑", "date": "2025-04-25", "color": "üü¢", "comments": []},
    {"user": "Alice", "title": "–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É", "date": "2025-04-26", "color": "üîµ", "comments": []}
]

ADDING, REMOVING, COMMENTING, EDITING = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data='view_calendar')],
        [InlineKeyboardButton("üìù –°–æ–±—ã—Ç–∏—è", callback_data='event_menu')]
    ]
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=InlineKeyboardMarkup(keyboard))

async def event_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add_event')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_event')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data='remove_event')],
        [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data='comment_event')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    text = "–ú–µ–Ω—é —Å–æ–±—ã—Ç–∏–π:\n- –î–æ–±–∞–≤–∏—Ç—å\n- –£–¥–∞–ª–∏—Ç—å\n- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n- –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å"
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def view_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = "üóìÔ∏è –°–æ–±—ã—Ç–∏—è –ø–æ –¥–Ω—è–º:\n\n"
    for idx, event in enumerate(events, 1):
        text += f"{idx}. {event['color']} {event['date']}\n{event['title']} ({event['user']})\n"
        if event['comments']:
            text += "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
            for c in event['comments']:
                text += f"- {c}\n"
        text += "\n"
    await query.edit_message_text(text=text)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == 'view_calendar':
        await view_calendar(update, context)
    elif data == 'event_menu':
        await event_menu(update, context)
    elif data == 'back_to_main':
        await start(update.callback_query, context)
    elif data == 'add_event':
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
        return ADDING
    elif data == 'remove_event':
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return REMOVING
    elif data == 'comment_event':
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ: –Ω–æ–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        return COMMENTING
    elif data == 'edit_event':
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ: –Ω–æ–º–µ—Ä –Ω–æ–≤–∞—è_–¥–∞—Ç–∞ –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ")
        return EDITING

async def add_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date, title = update.message.text.strip().split(" ", 1)
        user = update.effective_user.first_name
        events.append({"user": user, "title": title, "date": date, "color": "üü£", "comments": []})
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {date} ‚Äî {title}")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    return ConversationHandler.END

async def remove_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        idx = int(update.message.text.strip()) - 1
        if 0 <= idx < len(events):
            removed = events.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {removed['date']} ‚Äî {removed['title']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è.")
    return ConversationHandler.END

async def comment_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        number, comment = update.message.text.strip().split(" ", 1)
        idx = int(number) - 1
        if 0 <= idx < len(events):
            user = update.effective_user.first_name
            events[idx]["comments"].append(f"{user}: {comment}")
            await update.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    return ConversationHandler.END

async def edit_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.strip().split(" ", 2)
        idx = int(parts[0]) - 1
        new_date, new_title = parts[1], parts[2]
        if 0 <= idx < len(events):
            events[idx]['date'] = new_date
            events[idx]['title'] = new_title
            await update.message.reply_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {new_date} ‚Äî {new_title}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä –Ω–æ–≤–∞—è_–¥–∞—Ç–∞ –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ADDING: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_event)],
            REMOVING: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_event)],
            COMMENTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment_event)],
            EDITING: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_event)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()
