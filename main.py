import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from datetime import datetime

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
events = [
    {"user": "Alice", "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π", "date": "2025-04-24", "color": "üîµ"},
    {"user": "Bob", "title": "–î–µ–º–æ-–ø–æ–∫–∞–∑", "date": "2025-04-25", "color": "üü¢"},
    {"user": "Alice", "title": "–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É", "date": "2025-04-26", "color": "üîµ"}
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data='week')],
        [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data='month')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –±–æ—Ç üìÖ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    period = query.data
    filtered = events if period == "week" else events  # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    text = "üóìÔ∏è –°–æ–±—ã—Ç–∏—è:
"
    for event in filtered:
        text += f"{event['color']} {event['date']} ‚Äî {event['title']} ({event['user']})\n"
    await query.edit_message_text(text=text)

async def add_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /addevent –¥–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    date = context.args[0]
    title = " ".join(context.args[1:])
    user = update.effective_user.first_name
    color = "üü£"
    events.append({"user": user, "title": title, "date": date, "color": color})
    await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {date} ‚Äî {title}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start ‚Äî –Ω–∞—á–∞—Ç—å\n/addevent ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–¥–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ)\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addevent", add_event))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()
