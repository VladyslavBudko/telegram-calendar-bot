import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)
from datetime import datetime

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

events = [
    {"user": "Alice", "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π", "date": "2025-04-24", "color": "üîµ"},
    {"user": "Bob", "title": "–î–µ–º–æ-–ø–æ–∫–∞–∑", "date": "2025-04-25", "color": "üü¢"},
    {"user": "Alice", "title": "–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É", "date": "2025-04-26", "color": "üîµ"}
]

ADDING, REMOVING = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data='week')],
        [InlineKeyboardButton("üóìÔ∏è –ú–µ—Å—è—Ü", callback_data='month')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='add')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='remove')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data in ["week", "month"]:
        text = "üóìÔ∏è –°–æ–±—ã—Ç–∏—è:\\n"
        for idx, event in enumerate(events, 1):
            text += f"{idx}. {event['color']} {event['date']} ‚Äî {event['title']} ({event['user']})\\n"
        await query.edit_message_text(text=text)
    elif query.data == "add":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-05-01 –í—Å—Ç—Ä–µ—á–∞)")
        return ADDING
    elif query.data == "remove":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\\n"
        for idx, event in enumerate(events, 1):
            text += f"{idx}. {event['date']} ‚Äî {event['title']}\\n"
        await query.edit_message_text(text=text)
        return REMOVING

async def add_event_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.strip().split(" ", 1)
        date, title = parts[0], parts[1]
        user = update.effective_user.first_name
        events.append({"user": user, "title": title, "date": date, "color": "üü£"})
        await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {date} ‚Äî {title}")
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    return ConversationHandler.END

async def remove_event_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        idx = int(update.message.text.strip()) - 1
        if 0 <= idx < len(events):
            removed = events.pop(idx)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {removed['date']} ‚Äî {removed['title']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button)],
        states={
            ADDING: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_event_text)],
            REMOVING: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_event_text)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()